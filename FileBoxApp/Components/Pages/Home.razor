@page "/"
<PageTitle>Home</PageTitle>

@inject IRecentFilesRepository _RecentFileService;
@inject IFileRepository _FileRepository;

<div class="search-container">
	<InputText class="form-control search-box" placeholder="Search" @bind-value="@SearchValue" @bind-value:after="Search" autocomplete="off"/>
</div>

@if (ShowRecentFiles)
{
	<div class="flex-column recent-container">
		<div class="d-flex flex-row top-container">
			<h2>Recent Files</h2>
			<button type="button" class="btn btn-outline-primary" @onclick="@(() => ClearRecents())">Clear</button>
		</div>
		<hr />
		@if (RecentFiles.Count() == 0)
		{
			<p>No Recent Files Found</p>
		}
		else
		{
			<table class="w-100 recent-table">
				<tr>
					<th>Name</th>
					<th>Tags</th>
					<th>Last Accessed</th>
				</tr>

				@foreach (RecentFile recentFile in RecentFiles.OrderByDescending(r => r.Accessed))
				{
					<tr class="flex-row">
						<td class="recent-name-item">
							<a href="viewdocument/@((MarkupString)recentFile.Id.ToString())">
								@recentFile.Name
							</a>
						</td>
						<td class="recent-tags-item">None</td> @* TODO - Do logic for showning all the tags *@
						<td class="recent-accessed-item">
							@if (recentFile.Accessed.Date == DateTime.Now.Date)
							{
								@recentFile.Accessed.ToShortTimeString()
							}
							else
							{
								@recentFile.Accessed.ToShortDateString() @((MarkupString)" - ") @recentFile.Accessed.ToShortTimeString()

							}
						</td>
					</tr>
				}
			</table>
		}

	</div>
}
else
{
	<div>
		<h2>Results</h2>
		<table>
			<tr>
				<th>Name</th>
				<th>Tags</th>
			</tr>
			@foreach (FileBoxFile file in FileResults)
			{
				<tr>
					<td>
						<a href="viewdocument/@((MarkupString)file.Id.ToString())">@file.Name</a>
					</td>
					<td>
						None
					</td>
				</tr>
			}
		</table>
	</div>
}

@code
{
	private string SearchValue { get; set; } = String.Empty;


	private bool ShowRecentFiles = true;
	private List<RecentFile> RecentFiles { get; set; } = new List<RecentFile>();

	private List<FileBoxFile> FileResults { get; set; } = new List<FileBoxFile>();

	protected override async Task OnInitializedAsync()
	{
		try
		{
			RecentFiles = await _RecentFileService.GetRecentFiles();
			StateHasChanged();
		}
		catch
		{

		}

		base.OnInitialized();
	}

	private async void ClearRecents()
	{
		try
		{
			await _RecentFileService.ClearRecentFiles();

			RecentFiles = await _RecentFileService.GetRecentFiles();
			StateHasChanged();
		}
		catch
		{

		}
	}

	private void Search()
	{
		Console.WriteLine("Searching");

		if (String.IsNullOrWhiteSpace(SearchValue))
		{
			ShowRecentFiles = true;
			return;
		}

		FileResults = _FileRepository.GetFilesLikeName($"%{SearchValue}%");

		ShowRecentFiles = false;

		StateHasChanged();

	}

}
