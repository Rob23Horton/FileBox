@page "/viewdocument/{FileId}";

@inject IRecentFilesRepository _RecentFilesRepository;
@inject IFileRepository _FileRepository;
@inject IPathRepository _PathRespository;


<h3>@File.Name</h3>

<DocumentViewer @ref="docViewer"></DocumentViewer>

@code
{
	[Parameter]
	public string FileId
	{
		get{
			return iFileId.ToString();
		}
		set{
			int localInt = 0;
			int.TryParse(value, out localInt);
			iFileId = localInt;
		}
	}
	private int iFileId {get; set;}

	private FileBoxFile File { get; set; }
	private List<FileBoxPath> Paths { get; set; }
	private List<Tag> Tags { get; set; }

	private DocumentViewer docViewer { get; set; }

	private string? FirstErrorMessage { get; set; } = null;

	protected override async Task OnInitializedAsync()
	{
		try
		{
			File = _FileRepository.GetFileById(iFileId);

			//Gets all the paths that are on registered for the current device
			Paths = _PathRespository.GetAllPathsFromFileCode(iFileId);
			Paths = Paths.Where(p => p.DeviceName == DeviceInfo.Name).ToList();

			if (Paths.Count() == 0)
			{
				FirstErrorMessage = "No path found for document.";
			}
			else
			{
				await _RecentFilesRepository.AddRecentFile(new RecentFile() { Id = (int)File.Id, Name = File.Name, Accessed = DateTime.Now, Tags = new List<Tag>() });

				await docViewer.LoadFile(File, Paths);
			}

			StateHasChanged();
		}
		catch
		{
			docViewer.SetUserMessage("An error occured. Please try again!");
		}

		await base.OnInitializedAsync();
	}

	protected override void OnAfterRender(bool firstRender)
	{
		if (firstRender && FirstErrorMessage is not null)
		{
			docViewer.SetUserMessage(FirstErrorMessage);
		}

		base.OnAfterRender(firstRender);
	}
}
