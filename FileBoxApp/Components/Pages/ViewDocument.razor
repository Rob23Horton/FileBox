@page "/viewdocument/{FileId}";

@inject IRecentFilesRepository _RecentFilesRepository;
@inject IFileRepository _FileRepository;
@inject IPathRepository _PathRespository;
@inject ILocalFileSystemService _FileSystem;

<h3>@File.Name</h3>

@if (!String.IsNullOrWhiteSpace(FileData))
{
	<div>
		@if (IsImage)
		{
			<img src="@FileData" style="width: 100%" />
		}
		else if (IsText)
		{
			@((MarkupString)FileData)
		}
		else if (IsAudio)
		{
			<audio controls src="@FileData" style="width: 100%" />
		}
		else if (IsVideo)
		{
			<video controls src="@FileData" style="width: 100%"></video>
		}
		else
		{
			<div style="overflow-y:hidden">
				<embed src="@FileData" type="@((MarkupString)EmbededType)" frameBorder="0" scrolling="auto" style="width:100%;height:90vh" />
			</div>
		}
	</div>
}
else
{
	<p>Loading...</p>
	<p>@UserMessage</p>
}

@code
{
	[Parameter]
	public string FileId
	{
		get{
			return iFileId.ToString();
		}
		set{
			int localInt = 0;
			int.TryParse(value, out localInt);
			iFileId = localInt;
		}
	}
	private int iFileId {get; set;}

	private FileBoxFile File { get; set; }
	private List<FileBoxPath> Paths { get; set; }
	private List<Tag> Tags { get; set; }

	private FileBoxPath CurrentPath { get; set; }
	private string UserMessage { get; set; } = String.Empty;

	private bool IsImage { get; set; }
	private bool IsText { get; set; }
	private bool IsAudio { get; set; }
	private bool IsVideo { get; set; }

	private string EmbededType { get; set; } = String.Empty;
	private string FileData { get; set; } = String.Empty;

	protected override async Task OnInitializedAsync()
	{
		try
		{
			File = _FileRepository.GetFileById(iFileId);

			Paths = _PathRespository.GetAllPathsFromFileCode(iFileId);

			if (Paths.Count() == 0)
			{
				UserMessage = "No path found for document.";
			}
			else
			{
				await _RecentFilesRepository.AddRecentFile(new RecentFile() { Id = (int)File.Id, Name = File.Name, Accessed = DateTime.Now, Tags = new List<Tag>() });

				IsImage = !IsNotImage();
				await LoadFile();
			}

			StateHasChanged();
		}
		catch
		{
			UserMessage = "An error occured. Please try again!";
		}

		await base.OnInitializedAsync();
	}

	private bool IsNotImage()
	{
		switch (File.Type.ToLower())
		{
			case "pdf":
				return true;

			case "mp4":
				return true;

			case "mp3":
				return true;

			case "txt":
				return true;
		}

		return false;
	}

	private async Task LoadFile()
	{
		try
		{
			//TODO - Make system that checks if image is supported and if it isn't then it is converted
			//Also check if the size of the image is too large and if it is then convert as well

			byte[] data = new byte[0];

			string ImageType = File.Type;

			//TODO - Make system check from first path to last to check if file exists
			foreach (FileBoxPath Path in Paths.OrderBy(p => p.CurrentlyActive))
			{
				UserMessage = $"Getting file from Path {Paths.IndexOf(Path)+1}/{Paths.Count()}";
				StateHasChanged();

				if (File.Type.ToLower() == "txt")
				{
					FileData = await _FileSystem.GetTextFile(File, Path);
				}
				else
				{
					data = await _FileSystem.GetFile(File, Path);
				}

				if (data.Length == 0 && FileData.Length == 0) //File couldn't be found
				{
					//Updates path to not be active
					Path.CurrentlyActive = false;
					_PathRespository.EditPath(Path);
					continue;
				}

				else if (data.Length > 20_000_000 && IsImage) //If file is too big (Image)
				{
					data = await _FileSystem.GetJPGFile(File, Path); //Loads image as jpg (Cuz yk compression)
					ImageType = "jpg";

					if (data.Length == 0)
					{
						continue;
					}
				}

				//Updates path to be current
				Path.CurrentlyActive = true;
				_PathRespository.EditPath(Path);

				CurrentPath = Path;
				break;
			}

			//Returns if no data
			if (data.Length == 0 && FileData.Length == 0)
			{
				UserMessage = "File not found.";
				return;
			}

			//When image
			if (IsImage)
			{
				FileData = $"data:{ImageType};base64,{Convert.ToBase64String(data)}";
				return;
			}

			//When not an image
			switch (File.Type.ToLower())
			{
				case "pdf":
					FileData = $"data:application/{File.Type};base64,{Convert.ToBase64String(data)}";
					EmbededType = "application/pdf";
					break;

				case "mp4":
					FileData = $"data:video/mp4;base64,{Convert.ToBase64String(data)}";
					EmbededType = "video/mp4";
					IsVideo = true;
					break;

				case "mp3":
					FileData = $"data:audio/mpeg;base64,{Convert.ToBase64String(data)}";
					EmbededType = "audio/mpeg";
					IsAudio = true;
					break;

				case "txt":
					IsText = true;
					break;

				default:
					UserMessage = "File type is not supported.";
					break;
			}

			UserMessage = "";
		}
		catch (Exception e)
		{
			Console.WriteLine(e.ToString());
		}
	}

}
