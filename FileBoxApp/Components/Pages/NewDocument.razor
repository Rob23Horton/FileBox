@page "/newdocument"

@inject IFileRepository _FileRespository;
@inject IPathRepository _PathRespository;
@inject FilePickerService _FilePickerService;

<h1>Document</h1>

<button class="btn btn-primary" @onclick="SelectFile">Select File</button>

@if (File is not null)
{
	<button class="btn btn-success" @onclick="AddFiles">Add File</button>
	<button class="btn btn-danger" @onclick="Reset">Cancel</button>
}

<p>@ErrorMessage</p>

<DocumentViewer @ref="documentViewer"></DocumentViewer>

@code
{
	private FileBoxFile File { get; set;}
	private FileBoxPath Path { get; set; }

	private string ErrorMessage { get; set; }

	private DocumentViewer documentViewer { get; set; }

	private async void SelectFile()
	{
		try
		{
			string filePath = await _FilePickerService.PickFileAsync();

			if (String.IsNullOrWhiteSpace(filePath))
			{
				return;
			}

			FileInfo fileInfo = new FileInfo(filePath);

			File = new FileBoxFile()
				{
					Name = fileInfo.Name.Remove(fileInfo.Name.LastIndexOf("."), fileInfo.Extension.Length),
					Created = fileInfo.CreationTime,
					Type = fileInfo.Extension.Replace(".", "")
				};
			Path = new FileBoxPath() { DeviceName = DeviceInfo.Name, CurrentlyActive = true, FilePath = $"{fileInfo.DirectoryName.Replace("\\", "/")}/" };

			await documentViewer.LoadFile(File, new List<FileBoxPath>() { Path }, false);

			ErrorMessage = "";
			StateHasChanged();
		}
		catch
		{
		}
	}

	private async Task AddFiles()
	{
		try
		{
			int id = _FileRespository.GetFileId(File);
			ErrorMessage = "File has already been added.";
			StateHasChanged();
			return;

			//TODO - If file already exists then check if path also already exists (if not then add it)
		}
		catch
		{
			ErrorMessage = "";
			StateHasChanged();
		}

		try
		{
			_FileRespository.AddFile(File.Clone());
			File.Id = _FileRespository.GetFileId(File);

			Path.FileCode = File.Id;
			_PathRespository.AddPath(Path.Clone());

			ErrorMessage = "File has been added.";
		}
		catch
		{
			ErrorMessage = "An error occured while adding file.";	
		}

		StateHasChanged();
	}

	private void Reset()
	{
		documentViewer.SetUserMessage("");
		documentViewer.ClearImage();
	}
}
