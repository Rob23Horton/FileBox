@page "/newdocument"

@inject IFileRepository _FileRespository;
@inject IPathRepository _PathRespository;
@inject FilePickerService _FilePickerService;

<h1>Document</h1>

<button class="btn btn-primary" @onclick="@(() => SelectMultipleFiles())">Select Multiple Files</button>
<button class="btn btn-primary" @onclick="SelectFile">Select File</button>

@if (File is not null)
{
	<button class="btn btn-success" @onclick="AddFiles">Add File</button>
	<button class="btn btn-danger" @onclick="Reset">Cancel</button>
}

<p>@ErrorMessage</p>

<DocumentViewer @ref="documentViewer"></DocumentViewer>

<Modal @ref="multipleFilesModal">
	<Title>Add multiple files</Title>
	<Body>
		@if (skippedFiles.Count() > 0)
		{
			@foreach (KeyValuePair<string, string> skippedFile in skippedFiles)
			{
				<p>@skippedFile.Key - @skippedFile.Value</p>
			}
		}
		else
		{
			<p>You have selected @files.Count() file(s)</p>
		}
	</Body>
	<Footer>
		@if (files.Count() > 0)
		{
			<button type="button" class="btn btn-success" @onclick="@(() => AddMultipleFiles())">Add</button>
		}
		<button type="button" class="btn btn-danger" @onclick="@(() => multipleFilesModal.Close())">Close</button>
	</Footer>
</Modal>

@code
{
	private FileBoxFile File { get; set;}
	private FileBoxPath Path { get; set; }

	private string ErrorMessage { get; set; }

	private DocumentViewer documentViewer { get; set; }

	private Modal multipleFilesModal { get; set; }
	private List<string> files { get; set; } = new List<string>();
	private Dictionary<string, string> skippedFiles { get; set; } = new Dictionary<string, string>();

	private async void SelectFile()
	{
		try
		{
			string filePath = await _FilePickerService.PickFileAsync();

			if (String.IsNullOrWhiteSpace(filePath))
			{
				return;
			}

			CreateFileObject(filePath);

			await documentViewer.LoadFile(File, new List<FileBoxPath>() { Path }, false);

			ErrorMessage = "";
			StateHasChanged();
		}
		catch
		{
		}
	}

	private void CreateFileObject(string FilePath)
	{
		FileInfo fileInfo = new FileInfo(FilePath);

		File = new FileBoxFile()
			{
				Name = fileInfo.Name.Remove(fileInfo.Name.LastIndexOf("."), fileInfo.Extension.Length),
				Created = fileInfo.CreationTime,
				Type = fileInfo.Extension.Replace(".", "")
			};
		Path = new FileBoxPath() { DeviceName = DeviceInfo.Name, CurrentlyActive = true, FilePath = $"{fileInfo.DirectoryName.Replace("\\", "/")}/" };
	}

	private async Task AddFiles()
	{
		try
		{
			int id = _FileRespository.GetFileId(File);
			ErrorMessage = "File has already been added.";
			StateHasChanged();
			return;
		}
		catch
		{
			ErrorMessage = "";
			StateHasChanged();
		}

		try
		{
			_FileRespository.AddFile(File.Clone());
			File.Id = _FileRespository.GetFileId(File);

			Path.FileCode = File.Id;
			_PathRespository.AddPath(Path.Clone());

			ErrorMessage = "File has been added.";
		}
		catch
		{
			ErrorMessage = "An error occured while adding file.";	
		}

		StateHasChanged();
	}

	private void Reset()
	{
		documentViewer.SetUserMessage("");
		documentViewer.ClearImage();
	}

	private async Task SelectMultipleFiles()
	{
		try
		{
			files = await _FilePickerService.PickMultiFilesAsync();
			multipleFilesModal.Open();
		}
		catch
		{

		}
	}

	private void AddMultipleFiles()
	{
		skippedFiles = new Dictionary<string, string>();

		foreach (string file in files)
		{
			try
			{
				CreateFileObject(file);

				//Raw files aren't supported
				if (File.Type.ToLower() == "arw")
				{
					skippedFiles.Add(File.Name, "Raw file type is not supported.");
					continue;
				}

				//Skips if file exists
				_FileRespository.GetFileId(File);
				skippedFiles.Add(File.Name, "File already exists in database.");
				continue;
			}
			catch
			{

			}

			//Adds file
			try
			{
				_FileRespository.AddFile(File.Clone());
				File.Id = _FileRespository.GetFileId(File);

				Path.FileCode = File.Id;
				_PathRespository.AddPath(Path.Clone());

			}
			catch
			{

			}


		}

		File = new FileBoxFile();
		Path = new FileBoxPath();

		files = new List<string>();
	}
}
