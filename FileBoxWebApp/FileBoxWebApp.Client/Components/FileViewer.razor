
@if (!string.IsNullOrWhiteSpace(ErrorMessage))
{
	<h1>@ErrorMessage</h1>
}
else
{
	<div>
		@if (IsImage)
		{
			<select class="form-control" style="margin-bottom: 10px" @onchange="UpdateImageStyle">
				<option value="width">Width</option>
				<option value="height">Height</option>
			</select>
			<img src="@File.Data" style="@((MarkupString)ImageStyle)" />
		}
		else if (IsText)
		{
			<InputTextArea class="form-control" @bind-Value="@File.Data"></InputTextArea>
		}
		else if (IsAudio)
		{
			<audio controls src="@File.Data" style="width: 100%" />
		}
		else if (IsVideo)
		{
			<video controls src="@File.Data" style="width: 100%"></video>
		}
		else
		{
			<div style="overflow-y:hidden">
				<embed src="@File.Data" type="@((MarkupString)EmbededType)" frameBorder="0" scrolling="auto" style="width:100%;height:90vh" />
			</div>
		}
	</div>
}


@code
{
	[Parameter]
	[EditorRequired]
	public FileLoad File { get; set; }

	private string ErrorMessage { get; set; } = String.Empty;

	private bool IsImage { get; set; }
	private bool IsText { get; set; }
	private bool IsAudio { get; set; }
	private bool IsVideo { get; set; }

	private string ImageStyle { get; set; } = String.Empty;
	private string EmbededType { get; set; } = String.Empty;

	protected override Task OnInitializedAsync()
	{
		LoadFile();

		return base.OnInitializedAsync();
	}

	private bool IsNotImage(FileLoad File)
	{
		switch (File.Type.ToLower())
		{
			case "pdf":
				return true;

			case "mp4":
				return true;

			case "mp3":
				return true;

			case "txt":
				return true;
		}

		return false;
	}

	public async Task LoadFile()
	{
		try
		{
			ErrorMessage = "Loading...";
			StateHasChanged();

			IsImage = !IsNotImage(File);

			string ImageType = File.Type.ToLower();

			ErrorMessage = $"Opening file.";
			StateHasChanged();


			//Returns if no data
			if (File.Data.Length == 0)
			{
				ErrorMessage = "File has no data";
				StateHasChanged();
				return;
			}

			//When image
			if (IsImage)
			{
				File.Data = $"data:{ImageType};base64,{File.Data}";
				ErrorMessage = "";

				StateHasChanged();
				return;
			}

			ErrorMessage = "";

			//When not an image
			switch (File.Type.ToLower())
			{
				case "pdf":
					File.Data = $"data:application/{File.Type};base64,{File.Data}";
					EmbededType = "application/pdf";
					break;

				case "mp4":
					File.Data = $"data:video/mp4;base64,{File.Data}";
					EmbededType = "video/mp4";
					IsVideo = true;
					break;

				case "mp3":
					File.Data = $"data:audio/mpeg;base64,{File.Data}";
					EmbededType = "audio/mpeg";
					IsAudio = true;
					break;

				case "txt":
					File.Data = System.Text.Encoding.UTF8.GetString(Convert.FromBase64String(File.Data));
					IsText = true;
					break;

				default:
					ErrorMessage = "File type is not supported.";
					break;
			}

			StateHasChanged();
		}
		catch (Exception e)
		{
			Console.WriteLine(e.ToString());
		}
	}

	public void UpdateImageStyle(ChangeEventArgs e)
	{
		if ((string)e.Value == "width")
		{
			ImageStyle = "width: 100%";
		}
		else
		{
			ImageStyle = "height: 99vh";
		}
		StateHasChanged();
	}

	public void SetUserMessage(string text)
	{
		ErrorMessage = text;
		StateHasChanged();
	}

}
