
@inject IUploadService uploadService;

<div class="upload-list-container">
	<div class="panel">

		<div class="panel-heading d-grid">
			<div class="grid-left">
				<h3>UploadList</h3>
			</div>
			<div class="grid-right lean-right expand-btn" @onclick="CollapseOrExpand">
				<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-caret-down-fill @(IsCollapsed ? "rotate" : "")" viewBox="0 0 16 16">
					<path d="M7.247 11.14 2.451 5.658C1.885 5.013 2.345 4 3.204 4h9.592a1 1 0 0 1 .753 1.659l-4.796 5.48a1 1 0 0 1-1.506 0z" />
				</svg>
			</div>

		</div>
		<div class="panel-body list-container @(IsCollapsed ? "" : "list-container-expanded")">
			<table class="w-100 list-table @(Files.Count() == 0 ? "hidden" : "")">
				<tr>
					<th>Name</th>
					<th></th>
					<th></th>
				</tr>
				@foreach (UploadStatus status in Files)
				{
					<tr class="file-upload-row" style="background: linear-gradient(to right, #4caf50 @(status.Percentage)%, #ffffff @(status.Percentage)%);">
						<td class="file-name">@status.File.Name</td>
						<td>
							@if (status.IsWaiting || status.IsCancelled || status.Percentage == 100)
							{
								//Show Nothing
							}
							else if (status.IsPaused) //When paused
							{
								<svg @onclick="@(() => uploadService.ChangeValue(status.Id, "paused", false))"
								xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-play-fill" viewBox="0 0 16 16">
									<path d="m11.596 8.697-6.363 3.692c-.54.313-1.233-.066-1.233-.697V4.308c0-.63.692-1.01 1.233-.696l6.363 3.692a.802.802 0 0 1 0 1.393" />
								</svg>
							}
							else //When actually uploading
							{
								<svg @onclick="@(() => uploadService.ChangeValue(status.Id, "paused", true))"
								xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-pause-fill" viewBox="0 0 16 16">
									<path d="M5.5 3.5A1.5 1.5 0 0 1 7 5v6a1.5 1.5 0 0 1-3 0V5a1.5 1.5 0 0 1 1.5-1.5m5 0A1.5 1.5 0 0 1 12 5v6a1.5 1.5 0 0 1-3 0V5a1.5 1.5 0 0 1 1.5-1.5" />
								</svg>
							}
						</td>
						<td>
							@if (status.Percentage == 100)
							{

							}
							else if (!status.IsCancelled)
							{
								<svg @onclick="@(() => uploadService.ChangeValue(status.Id, "cancelled", true))"
								xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-stop-fill" viewBox="0 0 16 16">
									<path d="M5 3.5h6A1.5 1.5 0 0 1 12.5 5v6a1.5 1.5 0 0 1-1.5 1.5H5A1.5 1.5 0 0 1 3.5 11V5A1.5 1.5 0 0 1 5 3.5" />
								</svg>
							}
						</td>
					</tr>
				}
			</table>


			@if (Files.Count() == 0)
			{
				<p>Nothing to be uploaded</p>
			}
		</div>
	</div>

</div>

@code
{

	private bool IsCollapsed { get; set; }

	List<UploadStatus> Files { get; set; } = new List<UploadStatus>();

	protected override Task OnInitializedAsync()
	{
		IsCollapsed = true;
		uploadService.AddAction(this.ToString() is null ? "UploadList" : this.ToString(), this.FilesUpdated);

		Files = uploadService.GetFilesUploading();

		return base.OnInitializedAsync();
	}


	private void CollapseOrExpand()
	{
		IsCollapsed = !IsCollapsed;

		StateHasChanged();
	}

	public void FilesUpdated()
	{
		Files = uploadService.GetFilesUploading();

		StateHasChanged();
	}
}
