@page "/file/{sFileId}";

@inject HttpClient httpClient;

@if (!string.IsNullOrWhiteSpace(ErrorMessage))
{
	<h1>@ErrorMessage</h1>
}
else if (CurrentFile != null)
{
	<div style="margin=bottom: 25px;">
		<FileViewer File="@CurrentFile.Clone()"></FileViewer>
	</div>
}


@code
{

	[Parameter]
	public string sFileId
	{
		set
		{
			int fileId;
			if (int.TryParse(value, out fileId))
			{
				FileId = fileId;
				LoadFile();
			}
		}
		get
		{
			return FileId.ToString();
		}
	}

	private int FileId { get; set; }

	private FileLoad? CurrentFile { get; set; }

	private string ErrorMessage { get; set; }


	private async Task LoadFile()
	{
		try
		{
			ErrorMessage = "Loading";

			CurrentFile = await httpClient.GetFromJsonAsync<FileLoad>($"api/File/Get/{FileId}");

			ErrorMessage = "";

			StateHasChanged();
		}
		catch
		{
			ErrorMessage = "An error occured while loading file";	
		}
	}
}
